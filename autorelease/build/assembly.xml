
<!--
   Copyright (c) 2016-2017 Huawei Technologies Co., Ltd.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0" 
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
  <id>linux64</id>
  <formats>
    <format>tar.gz</format>
  </formats>
  <fileSets>
    <fileSet>
      <directory>../../distribution</directory>
      <outputDirectory>/</outputDirectory>
      <includes>
        <include>**</include>
      </includes>
    </fileSet>
  </fileSets>
  <dependencySets>


    <dependencySet>
      <outputDirectory>common-services-msb</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-services.microservice-bus:msb-core-standalone:tar.gz:linux64</include>
      </includes>
      <outputFileNameMapping>common-services-msb-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-services-protocolstack</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-services.protocol-stack:protocolstackservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>common-services-protocolstack-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-services-wso2ext</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-services.common-utilities.wso2bpel-ext:standalone:tar.gz:linux64</include>
      </includes>
      <outputFileNameMapping>common-services-wso2ext-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-services-extsys</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-services.external-system-registration:standalone:tar.gz:linux64</include>
      </includes>
      <outputFileNameMapping>common-services-extsys-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-services-drivermanager</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-services.driver-mgr:drivermanager-service-deployment:zip</include>
      </includes>
      <outputFileNameMapping>common-services-drivermanager-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-services-auth</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-services.auth:auth-service-deployment:zip</include>
      </includes>
      <outputFileNameMapping>common-services-auth-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-tosca-aria</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-tosca.aria:aria:zip</include>
      </includes>
      <outputFileNameMapping>common-tosca-aria-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-tosca-catalog</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-tosca.catalog:catalog-all:tar.gz:linux64</include>
      </includes>
      <outputFileNameMapping>common-tosca-catalog-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-tosca-inventory</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-tosca.inventory:standalone:tar.gz:linux64</include>
      </includes>
      <outputFileNameMapping>common-tosca-inventory-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>common-tosca-modeldesigner</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.common-tosca.model-designer.modeldesigner.distribution:modeldesigner-standalone:tar.gz:linux.gtk.x86_64</include>
      </includes>
      <outputFileNameMapping>common-tosca-modeldesigner-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdnhub-driver-zte-sptn</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdnhub.driver-zte-sptn:standalone:tar.gz:linux64</include>
      </includes>
      <outputFileNameMapping>sdnhub-driver-zte-sptn-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdnhub-driver-huawei-l3vpn</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdnhub.driver-huawei-l3vpn:l3vpndriver-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdnhub-driver-huawei-l3vpn-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdnhub-driver-huawei-openstack</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdnhub.driver-huawei-openstack:osdriverservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdnhub-driver-huawei-openstack-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdnhub-driver-huawei-overlay</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdnhub.driver-huawei-overlay:overlayvpndriver-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdnhub-driver-huawei-overlay-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdnhub-driver-huawei-servicechain</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdnhub.driver-huawei-servicechain:servicechaindriverservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdnhub-driver-huawei-servicechain-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdnhub-driver-ct-te</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdnhub.driver-ct-te:ct_tedriver:zip</include>
      </includes>
      <outputFileNameMapping>sdnhub-driver-ct-te-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-mss</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.brs:mss-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-mss-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-brs</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.brs:brs-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-brs-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-ipsec</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.ipsec:ipsecservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-ipsec-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-l2vpn</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.l2vpn:l2vpnservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-l2vpn-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-l3vpn</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.l3vpn:l3vpnservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-l3vpn-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-nslcm</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.nslcm:nslcm-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-nslcm-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-overlayvpn</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.overlay:overlayvpnservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-overlayvpn-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-servicechain</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.servicechain:servicechainservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-servicechain-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-vpc</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.vpc:vpcservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-vpc-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-service-vxlan</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.vxlan:vxlanservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>sdno-service-vxlan-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-monitoring</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.monitoring:ct_monitoring:zip</include>
      </includes>
      <outputFileNameMapping>sdno-monitoring-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-optimize</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.optimize:ct_optimizer:zip</include>
      </includes>
      <outputFileNameMapping>sdno-optimize-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>sdno-vsitemgr</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.sdno.vsitemgr:ct_vsitemgr:zip</include>
      </includes>
      <outputFileNameMapping>sdno-vsitemgr-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>gso-service-manager</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.gso:servicemanagerservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>gso-service-manager-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>gso-service-gateway</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.gso.gui:service-gateway-deployment:zip</include>
      </includes>
      <outputFileNameMapping>gso-service-gateway-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-driver-vim</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo:vimadapter-deployment:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-driver-vim-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-driver-vnfm-juju</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo:juju-vnfmadapterservice-deployment:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-driver-vnfm-juju-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-driver-vnfm-huawei</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo:hw-vnfmadapter-deployment:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-driver-vnfm-huawei-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-resmanagement</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo:resmanagement-deployment:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-resmanagement-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-umc</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo.monitor.umc.umc-api:umc-standalone:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-umc-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-dac</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo.monitor.dac.dac-api:dac-standalone:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-dac-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-lcm</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo:nfvo-lcm:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-lcm-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-driver-vnfm-zte</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo:drivers-vnfm-svnfm-zte-vmanager:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-driver-vnfm-zte-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>nfvo-driver-sdnc-zte</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.nfvo.sfc-driver-standalone:nfvo-drivers-sdnc-zte-sfc-driver:zip</include>
      </includes>
      <outputFileNameMapping>nfvo-driver-sdnc-zte-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <dependencySet>
      <outputDirectory>gso-gui-portal</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.openo.gso.gui:portal-package:zip</include>
      </includes>
      <outputFileNameMapping>gso-gui-portal-${artifact.version}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

  </dependencySets>
</assembly>

